apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: buildkit-root-less
spec:
  description: >
    Build and push OCI images with BuildKit in daemon‑less *root‑less* mode.
    Requires only /dev/fuse; no privileged PodSecurityContext.

  params:
    - name: image                # registry/repo:tag
      type: string
    - name: contextDir
      type: string
      default: "."
    - name: dockerfilePath
      type: string
      default: "Dockerfile"
    - name: platforms
      type: string
      default: ""                # e.g. linux/amd64,linux/arm64
    - name: cache                # "true" ➜ inline cache
      type: string
      default: "true"
    - name: push
      type: string
      default: "true"
    - name: buildArgs            # one KEY=value per line
      type: string
      default: ""
    - name: buildkitImage
      type: string
      default: "docker.io/moby/buildkit:v0.23.2-rootless"
    # --- new parameters --------------------------------------------------
    - name: dockerfileConfigMapName
      type: string
      description: Name of the ConfigMap that will store the Dockerfile content.
    - name: dockerfileConfigMapNamespace
      type: string
      description: Namespace in which to create/update the ConfigMap.
      default: "planton-cloud-pipelines"
    - name: owner-identifier-label-key
      type: string
      description: Optional owner identifier label key to add to the ConfigMap
      default: ""
    - name: owner-identifier-label-value
      type: string
      description: Optional owner identifier label value
      default: ""

  workspaces:
    - name: source
      description: Source code (required)
    - name: dockerconfig         # registry creds (optional)
      optional: true

  steps:
    # ------------------- new step: export Dockerfile ---------------------
    - name: export-dockerfile
      image: bitnami/kubectl:latest
      workingDir: "$(workspaces.source.path)/$(params.contextDir)"
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        allowPrivilegeEscalation: false
        capabilities:
          drop: ["ALL"]
        seccompProfile:
          type: Unconfined
      script: |
        #!/usr/bin/env bash
        set -euo pipefail

        file_path="$(params.dockerfilePath)"
        if [[ ! -f "$file_path" ]]; then
          echo "Dockerfile not found at $file_path"
          exit 1
        fi

        echo "Creating/updating ConfigMap '$(params.dockerfileConfigMapName)'..."
        encoded="$(base64 -w 0 "$file_path")"

        kubectl create configmap "$(params.dockerfileConfigMapName)" \
          --namespace "$(params.dockerfileConfigMapNamespace)" \
          --from-literal=Dockerfile="$encoded" \
          --dry-run=client -o yaml | kubectl apply -f -

        if [[ -n "$(params.owner-identifier-label-key)" && -n "$(params.owner-identifier-label-value)" ]]; then
          kubectl label configmap "$(params.dockerfileConfigMapName)" \
            --namespace "$(params.dockerfileConfigMapNamespace)" \
            "$(params.owner-identifier-label-key)=$(params.owner-identifier-label-value)" --overwrite
        fi

    # ------------------- build and push image ---------------------
    - name: build-and-push
      image: "$(params.buildkitImage)"
      workingDir: "$(workspaces.source.path)/$(params.contextDir)"

      # --- unprivileged security context ---
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        allowPrivilegeEscalation: false
        capabilities:
          drop: ["ALL"]
        seccompProfile:
          type: Unconfined

      env:
        - name: DOCKER_CONFIG
          value: "$(workspaces.dockerconfig.path)"
        - name: BUILDKITD_FLAGS
          value: --oci-worker-no-process-sandbox

      script: |
        #!/usr/bin/env sh
        set -eux

        opts=""

        [ -n "$(params.platforms)" ] && \
          opts="$opts --opt platform=$(params.platforms)"

        if [ "$(params.cache)" = "true" ]; then
          opts="$opts --export-cache type=inline \
            --import-cache type=registry,ref=$(params.image)"
        fi

        printf '%s\n' "$(params.buildArgs)" | while read -r arg; do
          [ -z "$arg" ] || opts="$opts --opt build-arg:$arg"
        done

        buildctl-daemonless.sh build \
          --frontend=dockerfile.v0 \
          --opt filename=$(params.dockerfilePath) \
          --local context=$(workspaces.source.path)/$(params.contextDir) \
          --local dockerfile=$(workspaces.source.path)/$(params.contextDir) \
          $opts \
          --output type=image,name=$(params.image),push=$(params.push) \
          --progress=plain
