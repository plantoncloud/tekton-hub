apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: generate-service-manifests
  annotations:
    adr.example.com/reference: "KustomizeBasedTektonTask"
spec:
  workspaces:
    - name: source
      description: Directory where application source is located.

  results:
    - name: serviceManifests
      description: |
        A JSON object with environment as the key and the base64-encoded content
        of the resulting `service.yaml` as the value. For example:
        {
          "dev": "LS0tIHNlcnZpY2UuLi4=",
          "prod": "LS0tIHNlcnZpY2UuLi4="
        }

  steps:
    - name: generate-service-manifests
      image: bitnami/kubectl:latest
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        # 1) Define the path to the overlays directory within the source workspace.
        overlays_dir="/workspace/source/_kustomize/overlays"

        # 2) If the overlays directory doesn't exist, produce an empty JSON and exit.
        if [[ ! -d "${overlays_dir}" ]]; then
          echo "Directory '${overlays_dir}' does not exist. Returning empty JSON."
          echo "{}" > "$(results.serviceManifests.path)"
          exit 0
        fi

        # 3) Change into the "_kustomize" directory so the `kubectl kustomize` command
        #    will be run relative to `overlays/`.
        cd "/workspace/source/_kustomize"

        result_json="{"
        first_entry="true"

        # 4) Loop over each directory under overlays (each treated as an environment).
        for env_dir in overlays/*; do
          if [[ -d "${env_dir}" ]]; then
            env="$(basename "${env_dir}")"
            echo "Processing environment: ${env}"

            # Use `kubectl kustomize` instead of `kustomize build`
            if ! kubectl kustomize "overlays/${env}" > service.yaml; then
              echo "Kustomize build failed for environment '${env}'. Skipping."
              continue
            fi

            if [[ -f service.yaml ]]; then
              encoded="$(base64 -w 0 service.yaml)"
              # Append the environment base64 result to our JSON.
              if [[ "${first_entry}" == "true" ]]; then
                first_entry="false"
              else
                result_json="${result_json},"
              fi
              result_json="${result_json}\"${env}\":\"${encoded}\""
            else
              echo "No service.yaml found for environment '${env}'."
            fi

            # Remove temporary service.yaml
            rm -f service.yaml
          fi
        done

        result_json="${result_json}}"
        echo "Resulting JSON: ${result_json}"

        # 5) Write final JSON to the Task result.
        echo "${result_json}" > "$(results.serviceManifests.path)"
