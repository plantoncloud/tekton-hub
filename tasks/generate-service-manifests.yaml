apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: generate-service-manifests
  annotations:
    adr.example.com/reference: "KustomizeBasedTektonTask"
spec:
  workspaces:
    - name: source
      description: Directory where application source is located.

  params:
    - name: environments
      type: array
      description: |
        List of environment names. Example: ["dev","local","prod"]
    - name: kustomizeDir
      type: string
      description: |
        Path to the folder containing 'base' and 'overlays' subdirectories.
        Typically './_kustomize'.
      default: ./_kustomize

  results:
    - name: serviceManifests
      description: >
        A JSON object with environment as the key and the base64-encoded
        content of service.yaml as the value. e.g.:
        {
          "dev": "LS0tIHNlcnZpY2UuLi4=",
          "prod": "LS0tIHNlcnZpY2UuLi4="
        }

  steps:
    - name: generate-service-manifests
      image: bitnami/kubectl:latest
      command:
        - /bin/bash
      args:
        # -c means "run the following script"
        - -c
        - |
          #!/usr/bin/env bash
          set -euxo pipefail

          # The first argument is the kustomizeDir
          kustomize_dir="$1"
          shift

          # The rest of the arguments are the environments
          environments=("$@")

          result_json="{"
          first_entry=true

          for env in "${environments[@]}"; do
            echo "Processing environment: $env"

            cd "${kustomize_dir}"
            if ! kustomize build "overlays/${env}" > service.yaml; then
              echo "Kustomize build failed for environment '${env}'. Skipping."
              cd -
              continue
            fi

            if [[ -f service.yaml ]]; then
              encoded="$(base64 -w 0 service.yaml)"
              if [[ "${first_entry}" == "true" ]]; then
                first_entry="false"
              else
                result_json="${result_json},"
              fi
              result_json="${result_json}\"${env}\":\"${encoded}\""
            else
              echo "No service.yaml found for environment '${env}'."
            fi

            rm -f service.yaml
            cd -
          done

          result_json="${result_json}}"
          echo "Resulting JSON: $result_json"

          # Write to Task result
          echo "$result_json" > "$(results.serviceManifests.path)"
        # Now pass the actual Tekton params as separate arguments
        - "$(params.kustomizeDir)"
        - "$(params.environments[*])"
