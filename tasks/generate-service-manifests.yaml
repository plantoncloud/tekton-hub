apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: generate-service-manifests
  annotations:
    adr.example.com/reference: "KustomizeBasedTektonTask"
spec:
  workspaces:
    - name: source
      description: Directory where application source is located.

  params:
    - name: environments
      type: array
      description: |
        List of environment names. Example: ["dev","local","prod"]
    - name: kustomizeDir
      type: string
      description: |
        Path (relative to /workspace/source) where you have 'base' and 'overlays'.
        Typically `_kustomize` or `./_kustomize`.
      default: _kustomize

  results:
    - name: serviceManifests
      description: |
        A JSON object with environment as the key and the base64-encoded content
        of service.yaml as the value. For example:
        {
          "dev": "LS0tIHNlcnZpY2UuLi4=",
          "prod": "LS0tIHNlcnZpY2UuLi4="
        }

  steps:
    - name: generate-service-manifests
      image: bitnami/kubectl:latest
      command:
        - /bin/bash
      args:
        - -c
        - |
          #!/usr/bin/env bash
          set -euxo pipefail

          # 1) Capture kustomizeDir from $1, or default to "_kustomize".
          kustomize_dir="${1:-_kustomize}"
          shift || true

          # 2) The remaining arguments are the environments.
          environments=("$@")

          # 3) Construct the full path to the kustomize directory in the workspace.
          full_path="$(workspaces.source.path)/${kustomize_dir}"

          # 4) If the directory doesn't exist, produce an empty JSON and exit.
          if [[ ! -d "${full_path}" ]]; then
            echo "Directory '${full_path}' does not exist. Returning empty JSON."
            echo "{}" > "$(results.serviceManifests.path)"
            exit 0
          fi

          # 5) Move into the directory and proceed with kustomize for each environment.
          cd "${full_path}"

          result_json="{"
          first_entry="true"

          for env in "${environments[@]}"; do
            echo "Processing environment: $env"
            
            if ! kustomize build "overlays/${env}" > service.yaml; then
              echo "Kustomize build failed for environment '${env}'. Skipping."
              continue
            fi

            if [[ -f service.yaml ]]; then
              encoded="$(base64 -w 0 service.yaml)"
              if [[ "${first_entry}" == "true" ]]; then
                first_entry="false"
              else
                result_json="${result_json},"
              fi
              result_json="${result_json}\"${env}\":\"${encoded}\""
            else
              echo "No service.yaml found for environment '${env}'."
            fi

            rm -f service.yaml
          done

          result_json="${result_json}}"
          echo "Resulting JSON: $result_json"

          # 6) Write final JSON to the Task result.
          echo "$result_json" > "$(results.serviceManifests.path)"
        - "$(params.kustomizeDir)"
        - "$(params.environments[*])"
