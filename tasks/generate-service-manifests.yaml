apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: generate-service-manifests
  annotations:
    adr.example.com/reference: "KustomizeBasedTektonTask"
spec:
  params:
    - name: environments
      type: array
      description: |
        List of environment names. Example: ["dev","local","prod"]
    - name: kustomizeDir
      type: string
      description: |
        Path to the folder containing 'base' and 'overlays' subdirectories.
        Typically './_kustomize'.
      default: ./_kustomize

  results:
    - name: serviceManifests
      description: >
        A JSON object with environment as the key and the base64-encoded
        content of service.yaml as the value. e.g.:
        {
          "dev": "LS0tIHNlcnZpY2UuLi4=",
          "prod": "LS0tIHNlcnZpY2UuLi4="
        }

  steps:
    - name: generate-service-manifests
      image: bitnami/kubectl:latest
      #
      # Tekton will automatically run the script below as /bin/sh -c (or bash),
      # so do NOT specify `command:` or `args:` or Tekton will fail validation.
      #
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        # The array param "environments" is expanded into a space-separated string
        # in ENVIRONMENTS. We convert that into a real bash array:
        IFS=' ' read -r -a environments <<< "$ENVIRONMENTS"

        # KUSTOMIZE_DIR is just the string param for the kustomize folder
        kustomize_dir="$KUSTOMIZE_DIR"

        # Prepare our JSON string
        result_json="{"
        first_entry=true

        for env in "${environments[@]}"; do
          echo "Processing environment: $env"
          cd "$kustomize_dir"

          # Attempt to build the overlay for this environment
          kustomize build "overlays/${env}" > service.yaml || {
            echo "Kustomize build failed for environment $env, skipping."
            cd -
            continue
          }

          # If we successfully generated a service.yaml, base64-encode it
          if [[ -f "service.yaml" ]]; then
            encoded="$(base64 -w 0 service.yaml)"
            if [[ "$first_entry" == "true" ]]; then
              first_entry="false"
            else
              result_json="${result_json},"
            fi
            result_json="${result_json}\"${env}\":\"${encoded}\""
          else
            echo "No service.yaml found for environment $env."
          fi

          rm -f service.yaml
          cd -
        done

        result_json="${result_json}}"
        echo "Resulting JSON: $result_json"

        # Write JSON to the Task result file
        echo "$result_json" > "$(results.serviceManifests.path)"
      #  
      # Pass Tekton params via environment variables:
      #
      env:
        - name: ENVIRONMENTS
          value: "$(params.environments[*])"
        - name: KUSTOMIZE_DIR
          value: "$(params.kustomizeDir)"
