apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: kustomize-build
  annotations:
    adr.example.com/reference: "KustomizeBasedTektonTask"
spec:
  params:
    - name: configMapName
      type: string
      description: The name of the ConfigMap to be created or updated.
    - name: configMapNamespace
      type: string
      description: The namespace in which to create/update the ConfigMap.
  workspaces:
    - name: source
      description: Directory where application source is located.

  steps:
    - name: kustomize-build
      image: bitnami/kubectl:latest
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        # 1) Define the path to the overlays directory within the source workspace.
        overlays_dir="/workspace/source/_kustomize/overlays"

        # 2) If the overlays directory doesn't exist, create an empty ConfigMap (no data).
        if [[ ! -d "${overlays_dir}" ]]; then
          echo "Directory '${overlays_dir}' does not exist. Creating empty ConfigMap..."

          kubectl create configmap "$(params.configMapName)" \
            --namespace "$(params.configMapNamespace)" \
            --dry-run=client \
            -o yaml \
          | kubectl apply -f -
          exit 0
        fi

        # 3) Change into the "_kustomize" directory so `kubectl kustomize` is relative to `overlays/`.
        cd "/workspace/source/_kustomize"

        # 4) Collect all --from-literal arguments in an array, then pass them to kubectl.
        #    Start with the basic `create configmap` command in dry-run mode.
        KCM_ARGS=( "create" "configmap" "$(params.configMapName)"
                   "--namespace" "$(params.configMapNamespace)"
                   "--dry-run=client"
                   "-o" "yaml" )

        # 5) Loop over each overlay directory (each environment).
        for env_dir in overlays/*; do
          if [[ -d "${env_dir}" ]]; then
            env="$(basename "${env_dir}")"
            echo "Processing environment: ${env}"

            # Run kubectl kustomize for this overlay.
            if ! kubectl kustomize "overlays/${env}" > service.yaml; then
              echo "Kustomize build failed for environment '${env}'. Exiting."
              exit 1
            fi

            # If service.yaml is generated, base64-encode and add as a literal entry.
            if [[ -f service.yaml ]]; then
              encoded="$(base64 -w 0 service.yaml)"
              # `--from-literal=env=base64data` will place it under data.env in the resulting ConfigMap.
              # If env contains special chars, it might need quoting, but for typical env names itâ€™s fine.
              KCM_ARGS+=( "--from-literal=${env}=${encoded}" )

              # Clean up
              rm -f service.yaml
            else
              echo "No service.yaml found for environment '${env}'."
            fi
          fi
        done

        # 6) Run kubectl with the collected arguments to generate YAML, then pipe to kubectl apply.
        "${KUBECTL_BIN:-kubectl}" "${KCM_ARGS[@]}" | kubectl apply -f -
