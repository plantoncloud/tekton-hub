apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: kustomize-build
  annotations:
    adr.example.com/reference: "KustomizeBasedTektonTask"
spec:
  params:
    - name: config-map-name
      type: string
      description: The name of the ConfigMap to be created or updated.
    - name: config-map-namespace
      type: string
      description: The namespace in which to create/update the ConfigMap.
    - name: project-root
      type: string
      description: Relative path to the project's root inside the cloned repo.
      default: "."
    - name: kustomizeBaseDirectory
      type: string
      description: Path to the kustomize base directory (relative to project root).
      default: "_kustomize"
  workspaces:
    - name: source
      description: Directory where application source is located.

  steps:
    - name: kustomize-build
      image: bitnami/kubectl:latest
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        # Path to overlays directory inside the workspace
        overlays_dir="/workspace/source/$(params.project-root)/$(params.kustomizeBaseDirectory)/overlays"

        # If overlays are missing, create (or update) an empty ConfigMap
        if [[ ! -d "${overlays_dir}" ]]; then
          echo "Directory '${overlays_dir}' does not exist; creating empty ConfigMap."
          kubectl create configmap "$(params.config-map-name)" \
            --namespace "$(params.config-map-namespace)" \
            --dry-run=client -o yaml | kubectl apply -f -
          exit 0
        fi

        # Change into the kustomize base directory
        cd "/workspace/source/$(params.project-root)/$(params.kustomizeBaseDirectory)"

        # Prepare kubectl create configmap arguments
        KCM_ARGS=( "create" "configmap" "$(params.config-map-name)"
                   "--namespace" "$(params.config-map-namespace)"
                   "--dry-run=client" "-o" "yaml" )

        # Iterate over each environment overlay
        for env_dir in overlays/*; do
          [[ -d "${env_dir}" ]] || continue
          env="$(basename "${env_dir}")"
          echo "Processing environment: ${env}"

          # Capture kustomize output and encode directlyâ€”no temp file required
          if ! encoded_yaml=$(kubectl kustomize "overlays/${env}" | base64 -w 0); then
            echo "Kustomize build failed for environment '${env}'."
            exit 1
          fi

          # Add literal entry for this env
          KCM_ARGS+=( "--from-literal=${env}=${encoded_yaml}" )
        done

        # Create/update the ConfigMap
        "${KUBECTL_BIN:-kubectl}" "${KCM_ARGS[@]}" | kubectl apply -f -
