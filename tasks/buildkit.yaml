apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: buildkit-daemonless
spec:
  description: >
    Build and push OCI‑compatible images using BuildKit in daemon‑less mode.

  # ------------------------------ parameters -----------------------------
  params:
    - name: image                  # registry/repo:tag
      type: string
    - name: contextDir             # build context directory
      type: string
      default: "."
    - name: dockerfilePath         # Dockerfile relative to contextDir
      type: string
      default: "Dockerfile"
    - name: platforms              # e.g. linux/amd64,linux/arm64
      type: string
      default: ""
    - name: cache                  # "true" ➜ inline cache
      type: string
      default: "true"
    - name: push                   # "true" ➜ push to registry
      type: string
      default: "true"
    - name: buildArgs              # each line KEY=value
      type: string
      default: ""
    - name: buildkitImage          # override only if needed
      type: string
      default: "moby/buildkit:v0.23.2-rootless"
    # --- new parameters ---
    - name: dockerfileConfigMapName
      type: string
      description: Name of the ConfigMap that will store the Dockerfile content.
    - name: dockerfileConfigMapNamespace
      type: string
      description: Namespace in which to create/update the ConfigMap.
      default: "planton-cloud-pipelines"

  # ------------------------------ workspaces -----------------------------
  workspaces:
    - name: source                 # mandatory source workspace
      description: Source code
    - name: dockerconfig           # optional registry creds
      optional: true
      description: Holds .docker/config.json

  # ------------------------------ steps ---------------------------------
  steps:
    # ------------------- export Dockerfile ---------------------
    - name: export-dockerfile
      image: bitnami/kubectl:latest
      script: |
        #!/usr/bin/env bash
        set -euo pipefail

        dockerfile_path="$(workspaces.source.path)/$(params.contextDir)/$(params.dockerfilePath)"
        if [[ ! -f "$dockerfile_path" ]]; then
          echo "Dockerfile not found at $dockerfile_path"
          exit 1
        fi

        echo "Creating/updating ConfigMap '$(params.dockerfileConfigMapName)'..."
        encoded="$(base64 -w 0 "$dockerfile_path")"

        kubectl create configmap "$(params.dockerfileConfigMapName)" \
          --namespace "$(params.dockerfileConfigMapNamespace)" \
          --from-literal=Dockerfile="$encoded" \
          --dry-run=client -o yaml | kubectl apply -f -

    # ------------------- build and push image ---------------------
    - name: build-and-push
      image: "$(params.buildkitImage)"
      workingDir: "$(workspaces.source.path)/$(params.contextDir)"
      securityContext:
        privileged: true          # required even for rootless image
      env:
        - name: DOCKER_CONFIG
          value: "$(workspaces.dockerconfig.path)"
      script: |
        #!/usr/bin/env sh
        set -eux

        extra_opts=""

        [ -n "$(params.platforms)" ] && \
          extra_opts="$extra_opts --opt platform=$(params.platforms)"

        if [ "$(params.cache)" = "true" ]; then
          extra_opts="$extra_opts --export-cache type=inline \
            --import-cache type=registry,ref=$(params.image)"
        fi

        printf '%s\n' "$(params.buildArgs)" | while IFS= read -r arg; do
          [ -z "$arg" ] || extra_opts="$extra_opts --opt build-arg:$arg"
        done

        buildctl-daemonless.sh build \
          --frontend=dockerfile.v0 \
          --opt filename=$(params.dockerfilePath) \
          --local context=$(workspaces.source.path)/$(params.contextDir) \
          --local dockerfile=$(workspaces.source.path)/$(params.contextDir) \
          $extra_opts \
          --output type=image,name=$(params.image),push=$(params.push) \
          --progress=plain

  volumes:
    - name: empty-dir
      emptyDir: {}
    - name: layers-dir
      emptyDir: {}
