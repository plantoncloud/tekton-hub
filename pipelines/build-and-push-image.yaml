apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: build-and-push-image
  namespace: planton-cloud-pipelines
spec:
  description: >
    A Pipeline with two distinct tasks (dockerfile vs. buildpacks)
    controlled by the 'image-build-method' parameter.
  params:
    - name: git-url
      type: string
      description: "The Git URL to clone"
    - name: git-revision
      type: string
      description: "Git revision to checkout"
      default: "main"
    - name: setup-package-credentials
      type: string
      description: "Set to 'true' to run setup-package-credentials task"
      default: "false"
    - name: image-name
      type: string
      description: "The full destination image (registry/repo:tag)"
    - name: image-build-method
      type: string
      description: "Either 'dockerfile' or 'buildpacks' to choose the build task"
      default: "buildpacks"
    - name: dockerfile-path
      type: string
      description: "Relative path to your Dockerfile"
      default: "Dockerfile"
    - name: buildpacks-builder-image
      type: string
      description: "Builder image for Buildpacks"
      default: "paketobuildpacks/builder-jammy-base"
    - name: kustomize-manifests-config-map-name
      type: string
      description: "Name of the config-map to store service manifests generated by kustomize"

  workspaces:
    - name: source
      description: "Workspace where source code is cloned"
    - name: package-credentials
      description: "Workspace that stores package-credentials required for build"

  tasks:
    ########################################################################
    # 1) Clone source from Git
    ########################################################################
    - name: git-checkout
      taskRef:
        resolver: hub
        params:
          - name: type
            value: tekton
          - name: kind
            value: task
          - name: name
            value: git-clone
          - name: version
            value: "0.9"
      params:
        - name: url
          value: "$(params.git-url)"
        - name: revision
          value: "$(params.git-revision)"
        - name: deleteExisting
          value: "true"
      workspaces:
        - name: output
          workspace: source

    - name: setup-package-credentials
      when:
        - input: "$(params.setup-package-credentials)"
          operator: in
          values: ["true"]
      runAfter:
        - git-checkout
      taskSpec:
        workspaces:
          - name: source
          - name: package-credentials
        steps:
          - name: copy
            image: alpine:3
            script: |
              mkdir -p /workspace/source/.package-credentials
              cp /workspace/package-credentials/* /workspace/source/.package-credentials/ || true
      workspaces:
        - name: source
        - name: package-credentials

    ########################################################################
    # Docker build (runs only if image-build-method == "dockerfile")
    ########################################################################
    - name: docker-build
      when:
        - input: "$(params.image-build-method)"
          operator: in
          values: ["dockerfile"]
      runAfter:
        - setup-package-credentials
      taskSpec:
        steps:
          - name: kaniko-build
            image: gcr.io/kaniko-project/executor:latest
            script: |
              #!/bin/sh
              set -e
              echo "Using Kaniko to build Docker image..."
              /kaniko/executor \
                --dockerfile "$(workspaces.source.path)/$(params.dockerfile-path)" \
                --context "$(workspaces.source.path)" \
                --destination "$(params.image-name)" \
                --verbosity info
              echo "Dockerfile-based build completed."
        workspaces:
          - name: source
        params:
          - name: image-name
          - name: dockerfile-path

      params:
        - name: image-name
          value: "$(params.image-name)"
        - name: dockerfile-path
          value: "$(params.dockerfile-path)"
      workspaces:
        - name: source
          workspace: source

    ########################################################################
    # 3) Buildpacks build (runs only if image-build-method == "buildpacks")
    ########################################################################
    - name: pack-build
      when:
        - input: "$(params.image-build-method)"
          operator: in
          values: ["buildpacks"]
      runAfter:
        - setup-package-credentials
      taskRef:
        resolver: git
        params:
          - name: url
            value: "https://github.com/plantoncloud/tekton-hub.git"
          - name: revision
            value: "main"
          - name: pathInRepo
            value: "tasks/buildpacks.yaml"
      params:
        - name: BUILDER_IMAGE
          value: "paketobuildpacks/builder-jammy-base"
        - name: APP_IMAGE
          value: "$(params.image-name)"
        - name: SOURCE_SUBPATH
          value: ""
        - name: PROCESS_TYPE
          value: ""
        - name: ENV_VARS
          value:
            - "GOOGLE_APPLICATION_CREDENTIALS=/workspace/source/.package-credentials/google-service-account.json"
      workspaces:
        - name: source
          workspace: source

    - name: kustomize-build
      runAfter:
        - git-checkout
      taskRef:
        resolver: git
        params:
          - name: url
            value: "https://github.com/plantoncloud/tekton-hub.git"
          - name: revision
            value: "main"
          - name: pathInRepo
            value: "tasks/kustomize-build.yaml"
      params:
        - name: config-map-name
          value: "$(params.kustomize-manifests-config-map-name)"
        - name: config-map-namespace
          value: "planton-cloud-pipelines"
      workspaces:
        - name: source
          workspace: source
