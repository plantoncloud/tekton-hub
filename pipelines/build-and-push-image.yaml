###############################################################################
# Tekton Pipeline
###############################################################################
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: build-and-push-image
  namespace: planton-cloud-pipelines
spec:
  params:
    - name: git-url
      type: string
      description: "The Git URL to clone"

    - name: git-revision
      type: string
      description: "Git revision to checkout"
      default: "main"

    - name: image-name
      type: string
      description: "The final image name to be built/pushed"

    - name: environments
      type: array
      default: []
      description: "List of environment names (e.g. [\"dev\",\"prod\"]). If empty, skip manifest generation."

  # Single workspace that tasks will share
  workspaces:
    - name: source
      description: "Workspace that stores source code & build artifacts"

  tasks:
    #################################################################
    # 1) GIT-CHECKOUT
    #################################################################
    - name: git-checkout
      taskRef:
        resolver: hub
        params:
          - name: type
            value: tekton
          - name: kind
            value: task
          - name: name
            value: git-clone
          - name: version
            value: "0.9"
      params:
        - name: url
          value: "$(params.git-url)"       # pipeline param
        - name: revision
          value: "$(params.git-revision)"  # pipeline param
        - name: deleteExisting
          value: "true"
        - name: subDirectory
          value: ""  # no extra nesting
        # If your commit is old or not on default HEAD, you could disable shallow clone:
        # - name: depth
        #   value: "0"
      workspaces:
        - name: output
          workspace: source

    #################################################################
    # 2) BUILD-IMAGE (with Buildpacks)
    #################################################################
    - name: build-image
      runAfter:
        - git-checkout
      taskRef:
        resolver: hub
        params:
          - name: type
            value: tekton
          - name: kind
            value: task
          - name: name
            value: buildpacks
          - name: version
            value: "0.6"
      params:
        - name: BUILDER_IMAGE
          value: "paketobuildpacks/builder:base"
        - name: PROCESS_TYPE
          value: ""
        - name: PATH
          value: "."  # looks in /workspace/source/
        - name: APP_IMAGE
          value: "$(params.image-name)"
        - name: PUSH_IMAGE
          value: "false"
      workspaces:
        - name: source
          workspace: source

    #################################################################
    # 3) GENERATE-SERVICE-MANIFESTS (Kustomize-based)
    #################################################################
    - name: generate-service-manifests
      runAfter:
        - git-checkout
      # This "when" expression ensures we only run this task if
      # the `environments` param is NOT equal to the literal "[]"
      # (which is how Tekton represents an empty array).
      when:
        - input: "$(params.environments)"
          operator: notin
          values:
            - "[]"
      taskRef:
        resolver: git
        params:
          - name: url
            value: "https://github.com/plantoncloud/tekton-hub.git"
          - name: revision
            value: "main"
          - name: pathInRepo
            value: "tasks/generate-service-manifests.yaml"

      # Pass our Pipeline params to the Task
      params:
        - name: environments
          value: "$(params.environments)"
        - name: kustomizeDir
          value: "./_kustomize"

      workspaces:
        - name: source
          workspace: source
